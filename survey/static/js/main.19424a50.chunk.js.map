{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["questions","id","text","App","props","state","answers","currentIndex","currentAnswer","handleAnswerUpdate","bind","handlePreviousNext","handleSave","e","this","setState","target","value","index","slice","length","i","findCurrentAnswer","isFound","push","question","className","onChange","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wOAGMA,G,MAAY,CAChB,CACEC,GAAI,EACJC,KAAM,sBAER,CACED,GAAI,EACJC,KAAM,gCAER,CACED,GAAI,EACJC,KAAM,4BAER,CACED,GAAI,EACJC,KAAM,mCAkFKC,E,YA7Eb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACCC,MAAQ,CACXC,QAAS,GACTC,aAAc,EACdC,cAAe,IAEjB,EAAKC,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBAC1B,EAAKC,mBAAqB,EAAKA,mBAAmBD,KAAxB,gBAC1B,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,gBATH,E,gFAYCG,GAClBC,KAAKC,SAAS,CACZP,cAAeK,EAAEG,OAAOC,U,wCAITC,GACjB,IAAIZ,EAAUQ,KAAKT,MAAMC,QAAQa,QAC7BX,EAAgB,GACpB,GAAIF,EAAQc,OAAS,EACnB,IAAK,IAAIC,EAAI,EAAGA,EAAIf,EAAQc,OAAQC,IAC9Bf,EAAQe,GAAGpB,KAAOiB,EAAQ,IAC5BV,EAAgBF,EAAQe,GAAGnB,MAIjC,OAAOM,I,yCAGWD,GAClBO,KAAKC,SAAS,CACZR,eACAC,cAAeM,KAAKQ,kBAAkBf,O,mCAKxC,IAAID,EAAUQ,KAAKT,MAAMC,QAAQa,QAC7BI,GAAU,EACd,GAAIjB,EAAQc,OAAS,EACnB,IAAK,IAAIC,EAAI,EAAGA,EAAIf,EAAQc,OAAQC,IAC9Bf,EAAQe,GAAGpB,KAAOa,KAAKT,MAAME,aAAe,IAC9CD,EAAQe,GAAGnB,KAAOY,KAAKT,MAAMG,cAC7Be,GAAU,GAIXA,GACHjB,EAAQkB,KAAK,CAACvB,GAAIa,KAAKT,MAAME,aAAe,EAAGL,KAAMY,KAAKT,MAAMG,gBAElEM,KAAKC,SAAS,CACZT,WACCQ,KAAKH,mBAAmBG,KAAKT,MAAME,aAAe,M,+BAG5C,IAAD,OACFkB,EAAWzB,EAAUc,KAAKT,MAAME,cAAcL,KACpD,OACE,yBAAKwB,UAAU,OACb,6BAAMD,GACN,6BAAMX,KAAKT,MAAME,aAAeP,EAAUoB,OAAS,GACjD,2BAAOO,SAAU,SAACd,GAAD,OAAO,EAAKJ,mBAAmBI,IAAII,MAAOH,KAAKT,MAAMG,iBAExE,6BACGM,KAAKT,MAAME,aAAe,GAC3B,4BAAQqB,QAAS,kBAAM,EAAKjB,mBAAmB,EAAKN,MAAME,aAAe,KAAzE,YACCO,KAAKT,MAAME,aAAeP,EAAUoB,OAAS,GAC9C,4BAAQQ,QAAS,kBAAM,EAAKjB,mBAAmB,EAAKN,MAAME,aAAe,KAAzE,QACCO,KAAKT,MAAMG,cAAcY,OAAS,GAAK,4BAAQQ,QAASd,KAAKF,YAAtB,c,GAvEhCiB,IAAMC,WCVJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.19424a50.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst questions = [\n  {\n    id: 1,\n    text: \"What is your name?\"\n  },\n  {\n    id: 2,\n    text: \"What is your favorite color?\"\n  },\n  {\n    id: 3,\n    text: \"What do you like to eat?\"\n  },\n  {\n    id: 4,\n    text: \"Thanks for taking the survey!\"\n  }\n];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n      this.state = {\n        answers: [],\n        currentIndex: 0,\n        currentAnswer: ''\n      };\n      this.handleAnswerUpdate = this.handleAnswerUpdate.bind(this);\n      this.handlePreviousNext = this.handlePreviousNext.bind(this);\n      this.handleSave = this.handleSave.bind(this);\n  }\n\n  handleAnswerUpdate (e) {\n    this.setState({\n      currentAnswer: e.target.value\n    });\n  }\n\n  findCurrentAnswer (index) {\n    let answers = this.state.answers.slice();\n    let currentAnswer = '';\n    if (answers.length > 0) {\n      for (let i = 0; i < answers.length; i++) {\n        if (answers[i].id === index + 1) {\n          currentAnswer = answers[i].text;\n        } \n      }\n    }\n    return currentAnswer;\n  }\n\n  handlePreviousNext (currentIndex) {\n    this.setState({\n      currentIndex,\n      currentAnswer: this.findCurrentAnswer(currentIndex)\n    });\n  }\n\n  handleSave () {\n    let answers = this.state.answers.slice();\n    let isFound = false;\n    if (answers.length > 0) {\n      for (let i = 0; i < answers.length; i++) {\n        if (answers[i].id === this.state.currentIndex + 1) {\n          answers[i].text = this.state.currentAnswer;\n          isFound = true;\n        }\n      }\n    }\n    if (!isFound) {\n      answers.push({id: this.state.currentIndex + 1, text: this.state.currentAnswer});\n    }\n    this.setState({\n      answers\n    }, this.handlePreviousNext(this.state.currentIndex + 1));\n  }\n  \n  render () {\n    const question = questions[this.state.currentIndex].text;\n    return (\n      <div className=\"App\">\n        <div>{question}</div>\n        <div>{this.state.currentIndex < questions.length - 1 &&\n          <input onChange={(e) => this.handleAnswerUpdate(e)} value={this.state.currentAnswer} />}\n        </div>\n        <div>\n          {this.state.currentIndex > 0 && \n          <button onClick={() => this.handlePreviousNext(this.state.currentIndex - 1)}>previous</button>}\n          {this.state.currentIndex < questions.length - 1 && \n          <button onClick={() => this.handlePreviousNext(this.state.currentIndex + 1)}>next</button>}\n          {this.state.currentAnswer.length > 0 && <button onClick={this.handleSave}>save</button>}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}